#include"JD3DUtility.h"
#include"../../../Core/Exception/JExceptionMacro.h"
#include<fstream>
#include<algorithm>
#include<d3dcompiler.h>

namespace JinEngine
{
    namespace Private
    {
        static constexpr short convertValue[(uint)J_RENDER_PRIMITIVE::COUNT]
        {
            D3D_PRIMITIVE_TOPOLOGY_UNDEFINED, //J_RENDER_PRIMITIVE::INVALID,
            D3D_PRIMITIVE_TOPOLOGY_POINTLIST, //J_RENDER_PRIMITIVE::POINT,
            D3D_PRIMITIVE_TOPOLOGY_LINELIST, //J_RENDER_PRIMITIVE::LINE,
            D3D_PRIMITIVE_TOPOLOGY_LINESTRIP, //J_RENDER_PRIMITIVE::LINE_STRIP,
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST, //J_RENDER_PRIMITIVE::TRIANGLE,
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP, //J_RENDER_PRIMITIVE::TRIANGLE_STRIP,
            D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ, //J_RENDER_PRIMITIVE::LINE_ADJACENCY,
            D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ, //J_RENDER_PRIMITIVE::LINE_STRIP_ADJACENCY,
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ, //J_RENDER_PRIMITIVE::TRIANGLE_ADJACENCY,
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ, //J_RENDER_PRIMITIVE::TRIANGLE_STRIP_ADJACENCY,
            D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_1,
            D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_2,
            D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_3,
            D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_4,
            D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_5,
            D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_6,
            D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_7,
            D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_8,
            D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_9,
            D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_10,
            D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_11,
            D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_12,
            D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_13,
            D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_14,
            D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_15,
            D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_16,
            D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_17,
            D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_18,
            D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_19,
            D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_20,
            D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_21,
            D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_22,
            D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_23,
            D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_24,
            D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_25,
            D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_26,
            D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_27,
            D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_28,
            D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_29,
            D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_30,
            D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_31,
            D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST, //J_RENDER_PRIMITIVE::CONTROL_POINT_PATCHLIST_32,
        };
    }

    uint JD3DUtility::CalcConstantBufferByteSize(const uint byteSize)noexcept
    {
        // Constants buffers must be a multiple of the minimum hardware
        // allocation size (usually 256 bytes).  So round up to nearest
        // multiple of 256.  We do this by adding 255 and then masking off
        // the lower 2 bytes which store all bits < 256.
        // Example: Suppose byteSize = 300.
        // (300 + 255) & ~255
        // 555 & ~255
        // 0x022B & ~0x00ff
        // 0x022B & 0xff00
        // 0x0200
        // 512
        return (byteSize + 255) & ~255;
    }
    D3D12_PRIMITIVE_TOPOLOGY JD3DUtility::ConvertRenderPrimitive(const J_RENDER_PRIMITIVE renderPrimitive)noexcept
    { 
        return (D3D12_PRIMITIVE_TOPOLOGY)Private::convertValue[(uint)renderPrimitive];
    }
    Microsoft::WRL::ComPtr<ID3DBlob> JD3DUtility::LoadBinary(const std::wstring& filename)
    {
        std::ifstream fin(filename, std::ios::binary);

        fin.seekg(0, std::ios_base::end);
        std::ifstream::pos_type size = (int)fin.tellg();
        fin.seekg(0, std::ios_base::beg);

        Microsoft::WRL::ComPtr<ID3DBlob> blob;
        ThrowIfFailedHr(D3DCreateBlob(size, blob.GetAddressOf()));

        fin.read((char*)blob->GetBufferPointer(), size);
        fin.close();

        return blob;
    }
    void JD3DUtility::ResourceTransition(_In_ ID3D12GraphicsCommandList* commandList, _In_ ID3D12Resource* pResource, D3D12_RESOURCE_STATES stateBefore, D3D12_RESOURCE_STATES stateAfter)
    {
        CD3DX12_RESOURCE_BARRIER rsBarrier = CD3DX12_RESOURCE_BARRIER::Transition(pResource, stateBefore, stateAfter);
        commandList->ResourceBarrier(1, &rsBarrier);
    }
}