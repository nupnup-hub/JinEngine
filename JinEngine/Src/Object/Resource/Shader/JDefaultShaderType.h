#pragma once
#include"JShaderFunctionEnum.h"
#include"JShaderGraphicPsoCondition.h"
#include"../../JObjectFlag.h"

namespace JinEngine
{
	enum class J_DEFAULT_GRAPHIC_SHADER
	{
		DEFAULT_SHADER,
		DEFAULT_LIGHT_SHADER,
		DEFAULT_ALBEDOMAP_SHADER,
		DEFAULT_STANDARD_SHADER,
		DEFAULT_SKY_SHADER,
		DEFAULT_SHADOW_MAP_SHADER,
		DEFAULT_DEBUG_SHADER,
		DEFAULT_DEBUG_LINE_SHADER,
		DEFAULT_BOUNDING_OBJECT_DEPTH_TEST_SHADER, 
		DEFAULT_PREVIEW_TEXTURE_SHADER,
		COUNTER,
	};

	enum class J_DEFAULT_COMPUTE_SHADER
	{
		DEFUALT_HZB_COPY_SHADER = 0,
		DEFUALT_HZB_DOWNSAMPLING_SHADER,
		DEFUALT_HZB_OCCLUSION_SHADER,
		COUNTER,
	};
	struct JDefaultShader
	{
	public:
		static J_GRAPHIC_SHADER_FUNCTION GetShaderFunction(const J_DEFAULT_GRAPHIC_SHADER sType)
		{
			switch (sType)
			{
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SHADER:
				return SHADER_FUNCTION_NONE;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_LIGHT_SHADER:
				return SHADER_FUNCTION_LIGHT;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_ALBEDOMAP_SHADER:
				return SHADER_FUNCTION_ALBEDO_MAP;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_STANDARD_SHADER:
				return (J_GRAPHIC_SHADER_FUNCTION)(SHADER_FUNCTION_SHADOW | SHADER_FUNCTION_LIGHT);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SKY_SHADER:
				return SHADER_FUNCTION_SKY;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SHADOW_MAP_SHADER:
				return (J_GRAPHIC_SHADER_FUNCTION)(SHADER_FUNCTION_ALPHA_CLIP | SHADER_FUNCTION_WRITE_SHADOWMAP);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_DEBUG_SHADER:
				return SHADER_FUNCTION_DEBUG; 
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_DEBUG_LINE_SHADER:
				return SHADER_FUNCTION_DEBUG;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_BOUNDING_OBJECT_DEPTH_TEST_SHADER:
				return SHADER_FUNCTION_DEPTH_TEST_BOUNDING_OBJECT; 
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_PREVIEW_TEXTURE_SHADER:
				return(J_GRAPHIC_SHADER_FUNCTION)(SHADER_FUNCTION_ALBEDO_MAP_ONLY | SHADER_FUNCTION_ALBEDO_MAP);
			default:
				break;
			}
		}
		static JShaderGraphicPsoCondition GetShaderGraphicPso(const J_DEFAULT_GRAPHIC_SHADER sType)
		{
			switch (sType)
			{
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SKY_SHADER:
			{
				JShaderGraphicPsoCondition pso;
				pso.cullModeCondition = J_SHADER_PSO_APPLIY_CONDITION::APPLY_J_PSO;
				pso.isCullModeNone = true;
				pso.depthCompareCondition = J_SHADER_PSO_APPLIY_CONDITION::APPLY_J_PSO;
				pso.depthCompareFunc = J_SHADER_DEPTH_COMPARISON_FUNC::LESS_EQUAL;
				return pso;
			}
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_DEBUG_LINE_SHADER:
			{
				JShaderGraphicPsoCondition pso;
				pso.primitiveCondition = J_SHADER_PSO_APPLIY_CONDITION::APPLY_J_PSO;
				pso.primitiveType = J_SHADER_PRIMITIVE_TYPE::LINE; 
				return pso;
			}
			default:
				return JShaderGraphicPsoCondition{};
			}
		}
		static J_COMPUTE_SHADER_FUNCTION GetComputeShaderFunction(const J_DEFAULT_COMPUTE_SHADER cType)
		{
			switch (cType)
			{
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_COPY_SHADER:
				return J_COMPUTE_SHADER_FUNCTION::HZB_COPY;
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_DOWNSAMPLING_SHADER:
				return J_COMPUTE_SHADER_FUNCTION::HZB_DOWN_SAMPLING;
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_OCCLUSION_SHADER:
				return J_COMPUTE_SHADER_FUNCTION::HZB_OCCLUSION;
			default:
				return J_COMPUTE_SHADER_FUNCTION::NONE;
			}
		}
		static J_OBJECT_FLAG GetObjectFlag(const J_DEFAULT_GRAPHIC_SHADER sType)
		{
			switch (sType)
			{
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_STANDARD_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SKY_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE);
			default:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE | OBJECT_FLAG_HIDDEN);
			}
		}
		static J_OBJECT_FLAG GetObjectFlag(const J_DEFAULT_COMPUTE_SHADER cType)
		{
			return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE | OBJECT_FLAG_HIDDEN);
		}

		static bool IsDefaultUse(const J_DEFAULT_GRAPHIC_SHADER cType)
		{
			switch (cType)
			{
			default:
				return true;
			}
		}
		static bool IsDefaultUse(const J_DEFAULT_COMPUTE_SHADER cType)
		{
			switch (cType)
			{
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_COPY_SHADER:
				return true;
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_DOWNSAMPLING_SHADER:
				return true;
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_OCCLUSION_SHADER:
				return true;
			default:
				return false;
			}
		}
	};
}