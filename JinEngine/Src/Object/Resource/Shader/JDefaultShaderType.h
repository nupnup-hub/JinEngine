#pragma once
#include"JShaderFunctionEnum.h"
#include"../../JObjectFlag.h"

namespace JinEngine
{ 
	enum class J_DEFAULT_GRAPHIC_SHADER
	{
		DEFAULT_SHADER,
		DEFAULT_STANDARD_SHADER,
		DEFAULT_SKY_SHADER,
		DEFAULT_SHADOW_MAP_SHADER,
		DEFAULT_DEBUG_LINE_SHADER,
		DEFAULT_BOUNDING_OBJECT_DEPTH_TEST_SHADER,
		COUNTER,
	}; 
			
	enum class J_DEFAULT_COMPUTE_SHADER
	{
		DEFUALT_HZB_SHADER = 0,
		COUNTER,
	};
	struct JDefaultShader
	{
	public:
		static J_SHADER_FUNCTION GetShaderFunction(const J_DEFAULT_GRAPHIC_SHADER sType)
		{
			switch (sType)
			{
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SHADER:
				return SHADER_FUNCTION_NONE;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_STANDARD_SHADER:
				return (J_SHADER_FUNCTION)(SHADER_FUNCTION_SHADOW | SHADER_FUNCTION_LIGHT);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SKY_SHADER:
				return SHADER_FUNCTION_SKY;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SHADOW_MAP_SHADER:
				return (J_SHADER_FUNCTION)(SHADER_FUNCTION_ALPHA_CLIP | SHADER_FUNCTION_WRITE_SHADOWMAP);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_DEBUG_LINE_SHADER:
				return SHADER_FUNCTION_DEBUG;
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_BOUNDING_OBJECT_DEPTH_TEST_SHADER:
				return SHADER_FUNCTION_DEPTH_TEST_BOUNDING_OBJECT;
			default:
				break;
			}
		}
		static J_COMPUTE_SHADER_FUNCTION GetComputeShaderFunction(const J_DEFAULT_COMPUTE_SHADER cType)
		{
			switch (cType)
			{
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_SHADER:
				return COMPUTE_SHADER_FUNCTION_HZB_OCCLUSION;
			default:
				return COMPUTE_SHADER_FUNCTION_NONE;
			}
		}
		static J_OBJECT_FLAG GetObjectFlag(const J_DEFAULT_GRAPHIC_SHADER sType)
		{
			switch (sType)
			{
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE | OBJECT_FLAG_HIDDEN);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_STANDARD_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SKY_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_SHADOW_MAP_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE | OBJECT_FLAG_HIDDEN);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_DEBUG_LINE_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE | OBJECT_FLAG_HIDDEN);
			case JinEngine::J_DEFAULT_GRAPHIC_SHADER::DEFAULT_BOUNDING_OBJECT_DEPTH_TEST_SHADER:
				return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE | OBJECT_FLAG_HIDDEN);
			default:
				return OBJECT_FLAG_NONE;
			}
		}
		static J_OBJECT_FLAG GetObjectFlag(const J_DEFAULT_COMPUTE_SHADER cType)
		{
			return (J_OBJECT_FLAG)(OBJECT_FLAG_AUTO_GENERATED | OBJECT_FLAG_UNEDITABLE | OBJECT_FLAG_UNDESTROYABLE | OBJECT_FLAG_HIDDEN);
		}

		static bool IsDefaultUse(const J_DEFAULT_COMPUTE_SHADER cType)
		{
			switch (cType)
			{
			case JinEngine::J_DEFAULT_COMPUTE_SHADER::DEFUALT_HZB_SHADER:
				return true;
			default:
				return false;
			}
		}
	};
}